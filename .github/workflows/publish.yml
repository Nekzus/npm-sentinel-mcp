# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: npm-mcp-server

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    quality:
        runs-on: ${{matrix.os}}
        timeout-minutes: 10

        strategy:
            matrix:
                node-version: [20.9.0, lts/*]
                os: [ubuntu-latest]

        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{matrix.node-version}}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{matrix.node-version}}
                  cache: 'npm'
            - run: npm ci
            - name: Handle optional dependencies
              run: |
                # Force reinstall to handle optional dependencies properly
                npm ci --no-optional
                # Install optional dependencies separately if needed
                npm install --optional
            - name: Lint
              run: npm run lint --if-present
            - name: Test
              run: npm run test
            - name: Build STDIO
              run: npm run build:stdio
            - name: Build HTTP
              run: npm run build:http

    publish:
        permissions:
            contents: write
            id-token: write
        runs-on: ubuntu-latest
        timeout-minutes: 15
        if: ${{github.ref == 'refs/heads/main'}}
        needs: [quality]
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Use Node.js 20.9.0
              uses: actions/setup-node@v4
              with:
                  node-version: '20.9.0'
                  cache: 'npm'
                  registry-url: 'https://registry.npmjs.org'
            - run: npm ci
            
            - name: Semantic Release
              run: npm run semantic-release
              env:
                  GH_TOKEN: ${{secrets.GH_TOKEN}}
                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
                  NPM_TOKEN: ${{secrets.NPM_TOKEN}}
                  NPM_CONFIG_PROVENANCE: true
                  
            # Get the new version from package.json after semantic-release
            - name: Get new version
              id: get_version
              run: |
                NEW_VERSION=$(node -p "require('./package.json').version")
                echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                echo "📦 New version: $NEW_VERSION"
                
            # Update versions in server.json only (index.ts is hardcoded)
            - name: Update versions in server.json
              run: |
                NEW_VERSION="${{ steps.get_version.outputs.new_version }}"
                echo "📦 Updating server.json version with: $NEW_VERSION"
                
                # Verify we have the version
                if [ -z "$NEW_VERSION" ]; then
                  echo "❌ Error: NEW_VERSION is empty"
                  exit 1
                fi
                
                # Show current state before replacement
                echo "📋 Before replacement - server.json version:"
                grep -n "version" server.json
                
                # Replace {{VERSION}} with actual version in server.json using temp file
                if sed "s/{{VERSION}}/$NEW_VERSION/g" server.json > server.json.tmp; then
                  mv server.json.tmp server.json
                  echo "✅ server.json updated successfully"
                else
                  echo "❌ Error updating server.json"
                  exit 1
                fi
                
                echo "✅ Version updated successfully"
                echo "📋 Final server.json version:"
                cat server.json | jq '.version, .packages[0].version'
                
                # Verify no {{VERSION}} placeholders remain in server.json
                echo "🔍 Verifying no {{VERSION}} placeholders remain in server.json..."
                if grep "{{VERSION}}" server.json; then
                  echo "❌ Error: {{VERSION}} placeholders still found in server.json!"
                  exit 1
                else
                  echo "✅ All {{VERSION}} placeholders successfully replaced in server.json"
                fi
                
            # Commit the version updates back to the repository
            - name: Commit version updates
              run: |
                git config --local user.email "action@github.com"
                git config --local user.name "GitHub Action"
                git add server.json
                git commit -m "chore: update version in server.json to ${{ steps.get_version.outputs.new_version }}" || echo "No changes to commit"
                git push origin main || echo "No changes to push"
            
            # Build STDIO version for npm package (excludes Smithery artifacts)
            - name: Build STDIO version for npm package
              run: |
                npm run build:stdio
                # Remove Smithery artifacts to avoid publishing them to npm
                rm -rf .smithery/
                rm -rf node_modules/@smithery/
                
            # Verify npm package contents
            - name: Verify npm package contents
              run: |
                echo "=== NPM Package Contents ==="
                ls -la dist/
                echo "=== Excluded Smithery artifacts ==="
                ls -la .smithery/ 2>/dev/null || echo "Smithery artifacts removed successfully"
                echo "=== Version in compiled code ==="
                grep -n "version:" dist/index.js | head -1
                  
            # Install MCP Publisher for registry publishing
            - name: Install MCP Publisher
              run: |
                curl -L "https://github.com/modelcontextprotocol/registry/releases/download/v1.0.0/mcp-publisher_1.0.0_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher
                
            # Login to MCP Registry using GitHub OIDC
            - name: Login to MCP Registry
              run: ./mcp-publisher login github-oidc
              
            # Publish to MCP Registry
            - name: Publish to MCP Registry
              run: ./mcp-publisher publish
                  
            # Build HTTP version for Smithery deployment (separate from npm)
            - name: Build HTTP version for Smithery
              run: |
                npm run build:http
                echo "=== Smithery build artifacts ==="
                ls -la .smithery/
                
            # Verify Smithery deployment readiness
            - name: Verify Smithery deployment readiness
              run: |
                echo "=== Required files for Smithery deploy ==="
                echo "smithery.yaml:"
                cat smithery.yaml
                echo ""
                echo "package.json module field:"
                node -p "require('./package.json').module"
                echo ""
                echo "Smithery build artifacts:"
                ls -la .smithery/
                echo ""
                echo "✅ Smithery deployment files verified!"
                
            # Set Dockerfile version label from package.json
            - name: Set Dockerfile version label from package.json
              run: |
                VERSION=$(node -p "require('./package.json').version")
                sed -i "s/LABEL version=\"[^\"]*\"/LABEL version=\"$VERSION\"/" Dockerfile